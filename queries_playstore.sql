-- Comments in SQL Start with dash-dash --
--1Ô∏è‚É£Find the app with an ID of 1880.
--SELECT * FROM analytics WHERE id = 1880;
--2Ô∏è‚É£Find the ID and app name for all apps that were last updated on August 01, 2018.
--SELECT id, app_name FROM analytics WHERE last_updated = '2018-08-01';
--3Ô∏è‚É£Count the number of apps in each category, e.g. ‚ÄúFamily | 1972‚Äù.
-- SELECT DISTINCT(category), COUNT(*) FROM analytics GROUP BY category;
--4Ô∏è‚É£Find the top 5 most-reviewed apps and the number of reviews for each.
--SELECT app_name, reviews FROM analytics ORDER BY reviews desc LIMIT 5;
--5Ô∏è‚É£Find the app that has the most reviews with a rating greater than equal to 4.8.
--SELECT MAX(reviews) FROM analytics WHERE rating >= 4.8;
--SELECT app_name, rating, reviews FROM analytics WHERE rating >= 4.8 ORDER BY reviews desc LIMIT 1;
--6Ô∏è‚É£Find the average rating for each category ordered by the highest rated to lowest rated.
--SELECT category, AVG(rating) AS rating_average FROM analytics GROUP BY category ORDER BY rating_average desc;
--7Ô∏è‚É£Find the name, price, and rating of the most expensive app with a rating that‚Äôs less than 3.
-- SELECT app_name, price, rating
--  FROM analytics
--  WHERE rating < 3
--  ORDER BY price desc
--  LIMIT 1;
--8Ô∏è‚É£Find all apps with a min install not exceeding 50, that have a rating. Order your results by highest rated first.
-- SELECT app_name, min_installs, rating
--  FROM analytics
--  WHERE min_installs < 50 AND rating IS NOT NULL
--  ORDER BY rating desc;
--9Ô∏è‚É£Find the names of all apps that are rated less than 3 with at least 10000 reviews.
-- playstore=# SELECT app_name, rating reviews                                                  FROM analytics                                                WHERE rating < 3 AND reviews >= 10000;                                                   
--üîüFind the top 10 most-reviewed apps that cost between 10 cents and a dollar.
-- SELECT app_name, price, reviews FROM analytics WHERE price BETWEEN .10 AND 1.00 ORDER BY reviews desc LIMIT 10;
--1Ô∏è‚É£1Ô∏è‚É£Find the most out of date app. Hint: You don‚Äôt need to do it this way, but it‚Äôs possible to do with a subquery:
-- SELECT app_name, last_updated FROM analytics ORDER BY last_updated LIMIT 1;
--1Ô∏è‚É£2Ô∏è‚É£Find the most expensive app (the query is very similar to #11).
-- SELECT app_name, price FROM analytics ORDER BY price desc LIMIT 1;
--1Ô∏è‚É£3Ô∏è‚É£Count all the reviews in the Google Play Store.
--SELECT SUM(reviews) FROM analytics;
--1Ô∏è‚É£4Ô∏è‚É£Find all the categories that have more than 300 apps in them.
-- SELECT category, COUNT(*) FROM analytics GROUP BY category HAVING COUNT(*) > 300;
--1Ô∏è‚É£5Ô∏è‚É£Find the app that has the highest proportion of min_installs to reviews, among apps that have been installed at least 100,000 times. Display the name of the app along with the number of reviews, the min_installs, and the proportion.
-- SELECT app_name, reviews, min_installs, min_installs / reviews AS proportion_installs_to_reviews                           FROM analytics                                                ORDER BY min_installs / reviews desc                                                   LIMIT 1;